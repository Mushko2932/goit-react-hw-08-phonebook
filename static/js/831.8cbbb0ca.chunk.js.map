{"version":3,"file":"static/js/831.8cbbb0ca.chunk.js","mappings":"iQAGaA,GAAOC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,mFAMJE,EAAYF,EAAAA,EAAAA,MAAH,mGAOTG,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,8EAMLK,EAAUL,EAAAA,EAAAA,OAAH,sQ,8BCddM,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,MAAON,EAAAA,KACJG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,cAGDE,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAe7B,OACE,SAAC,KAAD,CACEC,cAAe,CAAEX,KAAM,GAAII,MAAO,IAClCQ,iBAAkBf,EAClBgB,SAAU,SAACC,EAAQC,GAjBF,IAAAC,KAkBF,UAAKF,GAhBpBN,EAASS,QACP,SAAAC,GAAO,OACLA,EAAQlB,KAAKmB,cAAcC,SAC3BJ,EAAWhB,KAAKmB,cAAcC,MAFzB,IAGPC,OAAS,EAEXC,IAAAA,OAAAA,QAAA,UAA2BN,EAAWhB,KAAtC,4BAGFM,GAASiB,EAAAA,EAAAA,IAAWP,IAQhBD,EAAQS,WACT,EANH,UAQE,UAAClC,EAAD,YACE,UAACG,EAAD,CAAWgC,QAAQ,OAAnB,UAA0B,QAExB,SAAC/B,EAAD,CACEgC,KAAK,OACL1B,KAAK,OACL2B,QAAQ,yHACRC,MAAM,yIACNzB,UAAQ,QAGZ,UAACV,EAAD,CAAWgC,QAAQ,QAAnB,UAA2B,UAEzB,SAAC/B,EAAD,CACEgC,KAAK,MACL1B,KAAK,QACL2B,QAAQ,yFACRC,MAAM,+FACNzB,UAAQ,QAGZ,SAACP,EAAD,CAAS8B,KAAK,SAAd,SAAuB,oBAI9B,C,mECpEYG,EAAU,SAAC,GAAwB,EAAtBD,MAAsB,EAAfE,QAKhC,C,uLCLYC,EAASxC,EAAAA,EAAAA,MAAH,oJASNyC,EAAczC,EAAAA,EAAAA,MAAH,+F,UCNX0C,EAAa,WACxB,IAAMhB,GAASR,EAAAA,EAAAA,IAAYyB,EAAAA,IACrB5B,GAAWC,EAAAA,EAAAA,MAKjB,OACE,UAACwB,EAAD,WAAQ,yBAEN,SAACC,EAAD,CACEN,KAAK,OACL1B,KAAK,SACLmC,MAAOlB,EACPmB,SAVe,SAAAC,GACnB/B,GAASgC,EAAAA,EAAAA,GAAkBD,EAAEE,OAAOJ,OACrC,EASKK,YAAY,aAInB,ECtBYC,EAAclD,EAAAA,EAAAA,GAAH,mHAOXmD,EAAanD,EAAAA,EAAAA,OAAH,yVAkBVoD,EAAcpD,EAAAA,EAAAA,EAAH,iECtBXqD,EAAkB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAI7C,EAAmB,EAAnBA,KAAM8C,EAAa,EAAbA,OACpCxC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,UAACkC,EAAD,YACE,SAACE,EAAD,UAAc3C,KACd,SAAC2C,EAAD,UAAcG,KACd,SAACJ,EAAD,CAAYhB,KAAK,SAASqB,QAAS,kBARlBC,EAQqCH,OAPxDvC,GAAS2C,EAAAA,EAAAA,IAAcD,IADJ,IAAAA,CAQkB,EAAnC,SAA2D,aAH3CH,EAQrB,ECnBYK,EAAgB3D,EAAAA,EAAAA,GAAH,yGCMb4D,EAAc,WACzB,IAAM3C,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAGvB0C,GAFS3C,EAAAA,EAAAA,IAAYyB,EAAAA,IAEKf,cAC1BkC,EAAkB7C,EAASS,QAAO,SAAAC,GAAO,OAC7CA,EAAQlB,KAAKsD,WAAWnC,cAAcoC,SAASH,EADF,IAI/C,OACE,SAACF,EAAD,UACGG,EAAgBG,KAAI,gBAAGX,EAAH,EAAGA,GAAI7C,EAAP,EAAOA,KAAMI,EAAb,EAAaA,MAAb,OACnB,SAACwC,EAAD,CAA0BC,GAAIA,EAAI7C,KAAMA,EAAM8C,OAAQ1C,GAAhCyC,EADH,KAK1B,ECrBYY,EAAQ,SAAC,GAAgC,IAA9B3B,EAA6B,EAA7BA,SAAU4B,EAAmB,EAAnBA,cAChCC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,SAAAvB,GACL,WAAXA,EAAEwB,MACJH,GAEH,EAID,OAFAI,OAAOC,iBAAiB,UAAWH,GAE5B,WACLE,OAAOE,oBAAoB,UAAWJ,EACvC,CACF,GAAE,CAACF,IAQJ,OACE,gBAAKX,QAPqB,SAAC,GAA+B,IAA7BR,EAA4B,EAA5BA,OAA4B,EAApB0B,gBACf1B,GACpBmB,GAEH,EAGC,UACE,yBAAM5B,KAGX,ECsBD,EAzCiB,WACf,IAAMxB,GAAWC,EAAAA,EAAAA,MACX2D,GAAYzD,EAAAA,EAAAA,IAAY0D,EAAAA,IACxBC,GAAQ3D,EAAAA,EAAAA,IAAY4D,EAAAA,IAC1B,GAAoDC,EAAAA,EAAAA,WAAS,GAA7D,eAAOC,EAAP,KAA2BC,EAA3B,MAEAb,EAAAA,EAAAA,YAAU,WACRrD,GAASmE,EAAAA,EAAAA,MACV,GAAE,CAACnE,IAEJ,IAAMoE,EAAkB,WACtBF,GAAsB,SAAAG,GAAI,OAAKA,CAAL,GAC3B,EAED,OACE,4BACE,UAAC9C,EAAA,EAAD,YACE,4BACE,wBAAI,cACJ,4BACE,SAACI,EAAD,KACA,mBAAQP,KAAK,SAASqB,QAAS2B,UAGlCR,IAAcE,IAAS,uBAAG,4BAC3B,SAACjB,EAAD,OAEDoB,IACC,SAACd,EAAD,CACE3B,UACE,SAACD,EAAA,EAAD,CAASD,MAAM,kBAAf,UACE,SAACvB,EAAA,EAAD,CAAcuE,aAAcF,MAGhCE,aAAcF,MAKvB,C,gICjDM,IAAMhE,EAAqB,SAAAmE,GAAK,OAAIA,EAAMrE,SAASsE,KAAnB,EAC1BX,EAAkB,SAAAU,GAAK,OAAIA,EAAMrE,SAAS0D,SAAnB,EACvBG,EAAc,SAAAQ,GAAK,OAAIA,EAAMrE,SAAS4D,KAAnB,EACnBlC,EAAuB,SAAA2C,GAAK,OAAIA,EAAME,OAAV,C","sources":["components/ContactsForm/ContactsForm.styled.js","components/ContactsForm/ContactsForm.js","components/Section/Section.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.js","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Modal/Modal.js","pages/Contacts/Contacts.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form as FormikForm, Field as FormikField } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 340px;\n`;\n\nexport const Field = styled(FormikField)`\n  border-radius: 4px;\n  border: 0;\n  height: 30px;\n`;\n\nexport const FormBtn = styled.button`\n  width: 340px;\n  height: 30px;\n  cursor: pointer;\n  background-color: grey;\n  border: none;\n  border-radius: 4px;\n  box-shadow: 0px 0px 2px 2px rgb(0, 0, 0);\n  &:hover {\n    background-color: aquamarine;\n    color: white;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { Form, FormLabel, FormBtn, Field } from './ContactsForm.styled';\nimport { selectContactsList } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst ContactShema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  phone: Yup.string()\n    .min(2, 'Too Short!')\n    .max(13, 'Too Long!')\n    .required('Required'),\n});\n\nexport const ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsList);\n\n  const handleSubmit = newContact => {\n    if (\n      contacts.filter(\n        contact =>\n          contact.name.toLowerCase().trim() ===\n          newContact.name.toLowerCase().trim()\n      ).length > 0\n    ) {\n      Notiflix.Notify.warning(`${newContact.name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(newContact));\n  };\n  return (\n    <Formik\n      initialValues={{ name: '', phone: '' }}\n      validationSchema={ContactShema}\n      onSubmit={(values, actions) => {\n        handleSubmit({ ...values });\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <FormLabel htmlFor=\"name\">\n          Name\n          <Field\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </FormLabel>\n        <FormLabel htmlFor=\"phone\">\n          Number\n          <Field\n            type=\"tel\"\n            name=\"phone\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </FormLabel>\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </Form>\n    </Formik>\n  );\n};\n","import PropTypes from 'prop-types';\n\nexport const Section = ({ title, children }) => {\n  <section>\n    {title && <h2>{title}</h2>}\n    {children}\n  </section>;\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import styled from '@emotion/styled';\n\nexport const Filter = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  font-size: 24px;\n  font-weight: 500;\n`;\n\nexport const FilterField = styled.input`\n  width: 340px;\n  height: 30px;\n  border: 0;\n  border-radius: 4px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsFilter } from 'redux/contacts/selectors';\nimport { setContactsFilter } from 'redux/contacts/filterSlice';\nimport { Filter, FilterField } from './SearchForm.styled';\n\nexport const SearchForm = () => {\n  const filter = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(setContactsFilter(e.target.value));\n  };\n  return (\n    <Filter>\n      Find contacts by name\n      <FilterField\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChange}\n        placeholder=\"search\"\n      />\n    </Filter>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  gap: 60px;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const ContactBtn = styled.button`\n  padding: 4px;\n  background-color: hotpink;\n  font-size: 14px;\n  min-width: 120px;\n  height: 30px;\n  border: none;\n  border-radius: 4px;\n  color: black;\n  font-weight: bold;\n  cursor: pointer;\n  box-shadow: 0px 0px 2px 2px rgb(0, 0, 0);\n  &:hover {\n    background-color: aquamarine;\n    color: white;\n  }\n`;\n\nexport const ContactInfo = styled.p`\n  font-size: 16px;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ContactBtn, ContactInfo, ContactItem } from './ContactListItem.styled';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <ContactItem key={id}>\n      <ContactInfo>{name}</ContactInfo>\n      <ContactInfo>{number}</ContactInfo>\n      <ContactBtn type=\"button\" onClick={() => handleDelete(id)}>\n        Delete\n      </ContactBtn>\n    </ContactItem>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ContactRoster = styled.ul`\n  list-style: none;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n`;\n","import { useSelector } from 'react-redux';\nimport {\n  selectContactsFilter,\n  selectContactsList,\n} from 'redux/contacts/selectors';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { ContactRoster } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContactsList);\n  const filter = useSelector(selectContactsFilter);\n\n  const normalizedFilter = filter.toLowerCase();\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toString().toLowerCase().includes(normalizedFilter)\n  );\n\n  return (\n    <ContactRoster>\n      {visibleContacts.map(({ id, name, phone }) => (\n        <ContactListItem key={id} id={id} name={name} number={phone} />\n      ))}\n    </ContactRoster>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\n\nexport const Modal = ({ children, oncloseModal }) => {\n  useEffect(() => {\n    const handleKeydown = e => {\n      if (e.code === 'Escape') {\n        oncloseModal();\n      }\n    };\n\n    window.addEventListener('keedown', handleKeydown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeydown);\n    };\n  }, [oncloseModal]);\n\n  const handleDackdropClick = ({ target, currentTarget }) => {\n    if (currentTarget === target) {\n      oncloseModal();\n    }\n  };\n\n  return (\n    <div onClick={handleDackdropClick}>\n      <div>{children}</div>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  children: PropTypes.node,\n  oncloseModal: PropTypes.func,\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport { Section } from 'components/Section/Section';\nimport { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Modal } from 'components/Modal/Modal';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const [isShowModalAddUser, setIsShowModalAddUser] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleOpenModal = () => {\n    setIsShowModalAddUser(prev => !prev);\n  };\n\n  return (\n    <div>\n      <Section>\n        <div>\n          <h2>CONTACTS</h2>\n          <div>\n            <SearchForm />\n            <button type=\"button\" onClick={handleOpenModal}></button>\n          </div>\n        </div>\n        {isLoading && !error && <b>Request in progress...</b>}\n        <ContactList />\n      </Section>\n      {isShowModalAddUser && (\n        <Modal\n          children={\n            <Section title=\"Add New Contact\">\n              <ContactsForm onCloseModal={handleOpenModal} />\n            </Section>\n          }\n          onCloseModal={handleOpenModal}\n        ></Modal>\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;\n","export const selectContactsList = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContactsFilter = state => state.filters;\n"],"names":["Form","styled","FormikForm","FormLabel","Field","FormikField","FormBtn","ContactShema","Yup","shape","name","min","max","required","phone","ContactsForm","dispatch","useDispatch","contacts","useSelector","selectContactsList","initialValues","validationSchema","onSubmit","values","actions","newContact","filter","contact","toLowerCase","trim","length","Notiflix","addContact","resetForm","htmlFor","type","pattern","title","Section","children","Filter","FilterField","SearchForm","selectContactsFilter","value","onChange","e","setContactsFilter","target","placeholder","ContactItem","ContactBtn","ContactInfo","ContactListItem","id","number","onClick","contactId","deleteContact","ContactRoster","ContactList","normalizedFilter","visibleContacts","toString","includes","map","Modal","oncloseModal","useEffect","handleKeydown","code","window","addEventListener","removeEventListener","currentTarget","isLoading","selectIsLoading","error","selectError","useState","isShowModalAddUser","setIsShowModalAddUser","fetchContacts","handleOpenModal","prev","onCloseModal","state","items","filters"],"sourceRoot":""}