{"version":3,"file":"static/js/380.713e733f.chunk.js","mappings":"2PAGaA,GAAOC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,mFAMJE,EAAYF,EAAAA,EAAAA,MAAH,mGAOTG,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,8EAMLK,EAAUL,EAAAA,EAAAA,OAAH,sQ,oBChBdM,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,MAAOF,EAAAA,KACJG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,SAAUN,EAAAA,KACPG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,cAGDE,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,KAAD,CACEC,cAAe,CAAER,MAAO,GAAII,SAAU,IACtCK,iBAAkBZ,EAClBa,SAAU,SAACC,EAAQC,GACjBN,GAASO,EAAAA,EAAAA,KAAM,UAAKF,KACpBC,EAAQE,WACT,EANH,UAQE,UAACxB,EAAD,YACE,UAACG,EAAD,CAAWsB,QAAQ,QAAnB,UAA2B,SAEzB,SAACrB,EAAD,CACEsB,KAAK,QACLC,KAAK,QACLd,UAAQ,EACRe,YAAY,wBAGhB,UAACzB,EAAD,CAAWsB,QAAQ,WAAnB,UAA8B,YAE5B,SAACrB,EAAD,CACEsB,KAAK,WACLC,KAAK,WACLd,UAAQ,EACRe,YAAY,2BAGhB,SAACtB,EAAD,CAASoB,KAAK,SAAd,SAAuB,eAI9B,EC9CD,EAJc,WACZ,OAAO,SAACX,EAAD,GACR,C","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.js","pages/Login/Login.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form as FormikForm, Field as FormikField } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 340px;\n`;\n\nexport const Field = styled(FormikField)`\n  border-radius: 4px;\n  border: 0;\n  height: 30px;\n`;\n\nexport const FormBtn = styled.button`\n  width: 340px;\n  height: 30px;\n  cursor: pointer;\n  background-color: grey;\n  border: none;\n  border-radius: 4px;\n  box-shadow: 0px 0px 2px 2px rgb(0, 0, 0);\n  &:hover {\n    background-color: aquamarine;\n    color: white;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { Form, FormLabel, FormBtn, Field } from './LoginForm.styled';\nimport { logIn } from 'redux/auth/operations';\n\nconst ContactShema = Yup.object().shape({\n  email: Yup.string()\n    .min(2, 'Too Short!')\n    .max(13, 'Too Long!')\n    .required('Required'),\n  password: Yup.string()\n    .min(2, 'Too Short!')\n    .max(13, 'Too Long!')\n    .required('Required'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={ContactShema}\n      onSubmit={(values, actions) => {\n        dispatch(logIn({ ...values }));\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <FormLabel htmlFor=\"email\">\n          EMAIL\n          <Field\n            type=\"email\"\n            name=\"email\"\n            required\n            placeholder=\"Enter email ...\"\n          />\n        </FormLabel>\n        <FormLabel htmlFor=\"password\">\n          PASSWORD\n          <Field\n            type=\"password\"\n            name=\"password\"\n            required\n            placeholder=\"Enter password ...\"\n          />\n        </FormLabel>\n        <FormBtn type=\"submit\">LOG IN</FormBtn>\n      </Form>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst Login = () => {\n  return <LoginForm />;\n};\n\nexport default Login;\n"],"names":["Form","styled","FormikForm","FormLabel","Field","FormikField","FormBtn","ContactShema","Yup","shape","email","min","max","required","password","LoginForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","logIn","resetForm","htmlFor","type","name","placeholder"],"sourceRoot":""}