{"version":3,"file":"static/js/771.5d517442.chunk.js","mappings":"oQAAaA,EAAqB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAC1BC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EACvBC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAnB,EACnBC,EAAuB,SAAAP,GAAK,OAAIA,EAAMQ,OAAV,E,oECA5BC,GAAOC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,mFAMJE,EAAYF,EAAAA,EAAAA,MAAH,mGAOTG,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,8EAMLK,EAAUL,EAAAA,EAAAA,OAAH,2X,UCddM,EAAgBC,EAAAA,KAAaC,MAAM,CACvCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,OAAQN,EAAAA,KACLG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,cAGDE,EAAe,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACvBC,GAAWC,EAAAA,EAAAA,MACX1B,GAAW2B,EAAAA,EAAAA,IAAY7B,GAgB7B,OACE,SAAC,KAAD,CACE8B,cAAe,CAAEV,KAAM,GAAII,OAAQ,IACnCO,iBAAkBd,EAClBe,SAAU,SAACC,EAAQC,GAlBF,IAAAC,KAmBF,UAAKF,GAjBpB/B,EAASkC,QACP,SAAAC,GAAO,OACLA,EAAQjB,KAAKkB,cAAcC,SAC3BJ,EAAWf,KAAKkB,cAAcC,MAFzB,IAGPC,OAAS,EAEXC,IAAAA,OAAAA,QAAA,UAA2BN,EAAWf,KAAtC,6BAGFO,GAASe,EAAAA,EAAAA,IAAWP,IACpBT,KAQIQ,EAAQS,WACT,EANH,UAQE,UAACjC,EAAD,YACE,UAACG,EAAD,CAAW+B,QAAQ,OAAnB,UAA0B,QAExB,SAAC9B,EAAD,CACE+B,KAAK,OACLzB,KAAK,OACL0B,QAAQ,yHACRC,MAAM,yIACNxB,UAAQ,QAGZ,UAACV,EAAD,CAAW+B,QAAQ,SAAnB,UAA4B,UAE1B,SAAC9B,EAAD,CACE+B,KAAK,MACLzB,KAAK,SACL0B,QAAQ,yFACRC,MAAM,+FACNxB,UAAQ,QAGZ,SAACP,EAAD,CAAS6B,KAAK,SAAd,SAAuB,oBAI9B,E,UCrEYG,EAAYrC,EAAAA,EAAAA,IAAH,wFAOTsC,EAAStC,EAAAA,EAAAA,MAAH,mJASNuC,EAAcvC,EAAAA,EAAAA,MAAH,+GCbXwC,EAAa,WACxB,IAAMf,GAASP,EAAAA,EAAAA,IAAYrB,GACrBmB,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAACoB,EAAD,WACE,UAACC,EAAD,WAAQ,yBAEN,SAACC,EAAD,CACEL,KAAK,OACLzB,KAAK,SACLgC,MAAOhB,EACPiB,SAZa,SAAAC,GACnB3B,GAAS4B,EAAAA,EAAAA,GAAkBD,EAAEE,OAAOJ,OACrC,EAWOK,YAAY,eAKrB,E,UCzBYC,EAAc/C,EAAAA,EAAAA,GAAH,6EAKXgD,EAAahD,EAAAA,EAAAA,OAAH,4bAuBViD,EAAcjD,EAAAA,EAAAA,EAAH,kFCzBXkD,EAAkB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,GAAI1C,EAAmB,EAAnBA,KAAMI,EAAa,EAAbA,OACpCG,GAAWC,EAAAA,EAAAA,MAMjB,OACE,UAAC8B,EAAD,YACE,SAACE,EAAD,UAAcxC,KACd,SAACwC,EAAD,UAAcpC,KACd,SAACmC,EAAD,CAAYd,KAAK,SAASkB,QAAS,kBARlBC,EAQqCF,OAPxDnC,GAASsC,EAAAA,EAAAA,IAAcD,IADJ,IAAAA,CAQkB,EAAnC,SAA2D,aAH3CF,EAQrB,ECnBYI,EAAgBvD,EAAAA,EAAAA,GAAH,8ICMbwD,GAAc,WACzB,IAAMjE,GAAW2B,EAAAA,EAAAA,IAAY7B,GACvBoC,GAASP,EAAAA,EAAAA,IAAYrB,GAErB4D,GAAe,OAChBlE,EAASkC,QAAO,SAAAC,GAAO,OAAIA,EAAQjB,KAAKkB,cAAc+B,SAASjC,EAAxC,KAG5B,OACE,SAAC8B,EAAD,UACGE,EAAgBE,KAAI,gBAAGR,EAAH,EAAGA,GAAI1C,EAAP,EAAOA,KAAMI,EAAb,EAAaA,OAAb,OACnB,SAACqC,EAAD,CAA0BC,GAAIA,EAAI1C,KAAMA,EAAMI,OAAQA,GAAhCsC,EADH,KAK1B,ECrBYS,GAAU5D,EAAAA,EAAAA,IAAH,2QAaP6D,GAAc7D,EAAAA,EAAAA,IAAH,6L,WCVlB8D,GAAYC,SAASC,cAAc,eAE5BC,GAAQ,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,SAAUnD,EAAmB,EAAnBA,cAChCoD,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,SAAAzB,GACL,WAAXA,EAAE0B,MACJtD,GAEH,EAID,OAFAuD,OAAOC,iBAAiB,UAAWH,GAE5B,WACLE,OAAOE,oBAAoB,UAAWJ,EACvC,CACF,GAAE,CAACrD,IAQJ,OAAO0D,EAAAA,GAAAA,eACL,SAACb,GAAD,CAASR,QAPiB,SAAC,GAA+B,IAA7BP,EAA4B,EAA5BA,OAA4B,EAApB6B,gBACf7B,GACpB9B,GAEH,EAGC,UACE,SAAC8C,GAAD,UAAcK,MAEhBJ,GAEH,EChCYa,GAAgB3E,EAAAA,EAAAA,IAAH,oHAQb4E,GAAoB5E,EAAAA,EAAAA,IAAH,0FAMjB6E,GAAQ7E,EAAAA,EAAAA,GAAH,iFAOL8E,GAAgB9E,EAAAA,EAAAA,IAAH,gEAKb+E,GAAgB/E,EAAAA,EAAAA,OAAH,khBC2B1B,GAtCiB,WACf,IAAMgB,GAAWC,EAAAA,EAAAA,MACXvB,GAAYwB,EAAAA,EAAAA,IAAYzB,GACxBG,GAAQsB,EAAAA,EAAAA,IAAYvB,GAC1B,GAAoDqF,EAAAA,EAAAA,WAAS,GAA7D,eAAOC,EAAP,KAA2BC,EAA3B,MAEAf,EAAAA,EAAAA,YAAU,WACRnD,GAASmE,EAAAA,EAAAA,MACV,GAAE,CAACnE,IAEJ,IAAMoE,EAAkB,WACtBF,GAAsB,SAAAG,GAAI,OAAKA,CAAL,GAC3B,EAED,OACE,UAACV,GAAD,YACE,UAACC,GAAD,YACE,SAACC,GAAD,UAAO,cACP,UAACC,GAAD,YACE,SAACtC,EAAD,KACA,SAACuC,GAAD,CAAe7C,KAAK,SAASkB,QAASgC,EAAtC,SAAuD,sBAK1D1F,IAAcE,IAAS,uBAAG,4BAC3B,SAAC4D,GAAD,IAECyB,IACC,SAAChB,GAAD,CACEC,UAAU,SAACpD,EAAD,CAAcC,aAAcqE,IACtCrE,aAAcqE,MAKvB,C","sources":["redux/contacts/selectors.js","components/ContactsForm/ContactsForm.styled.js","components/ContactsForm/ContactsForm.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.js","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Modal/Modal.styled.js","components/Modal/Modal.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["export const selectContactsList = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContactsFilter = state => state.filters;\n","import styled from '@emotion/styled';\nimport { Form as FormikForm, Field as FormikField } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 340px;\n`;\n\nexport const Field = styled(FormikField)`\n  border-radius: 4px;\n  border: 0;\n  height: 30px;\n`;\n\nexport const FormBtn = styled.button`\n  min-width: 340px;\n  height: 30px;\n\n  cursor: pointer;\n  background-color: #0079ff;\n  color: #feff86;\n\n  border: none;\n  border-radius: 8px;\n\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    color: #0079ff;\n    background: #feff86;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { Form, FormLabel, FormBtn, Field } from './ContactsForm.styled';\nimport { selectContactsList } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(2, 'Too Short!')\n    .max(13, 'Too Long!')\n    .required('Required'),\n});\n\nexport const ContactsForm = ({ onCloseModal }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsList);\n\n  const handleSubmit = newContact => {\n    if (\n      contacts.filter(\n        contact =>\n          contact.name.toLowerCase().trim() ===\n          newContact.name.toLowerCase().trim()\n      ).length > 0\n    ) {\n      Notiflix.Notify.warning(`${newContact.name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(newContact));\n    onCloseModal();\n  };\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={ContactSchema}\n      onSubmit={(values, actions) => {\n        handleSubmit({ ...values });\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <FormLabel htmlFor=\"name\">\n          Name\n          <Field\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </FormLabel>\n        <FormLabel htmlFor=\"number\">\n          Number\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </FormLabel>\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 400px;\n`;\n\nexport const Filter = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n  font-size: 24px;\n  font-weight: 500;\n`;\n\nexport const FilterField = styled.input`\n  width: 250px;\n  height: 30px;\n  border: 2px solid #0079ff;\n  border-radius: 4px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsFilter } from 'redux/contacts/selectors';\nimport { setContactsFilter } from 'redux/contacts/filterSlice';\nimport { Filter, FilterField, Container } from './SearchForm.styled';\n\nexport const SearchForm = () => {\n  const filter = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(setContactsFilter(e.target.value));\n  };\n\n  return (\n    <Container>\n      <Filter>\n        Find contacts by name\n        <FilterField\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={handleChange}\n          placeholder=\"search\"\n        />\n      </Filter>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const ContactBtn = styled.button`\n  padding: 4px;\n  background-color: hotpink;\n  font-size: 14px;\n  min-width: 120px;\n  height: 30px;\n  cursor: pointer;\n  background-color: #0079ff;\n  color: #feff86;\n\n  border: none;\n  border-radius: 8px;\n\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    color: #0079ff;\n    background: #feff86;\n  }\n`;\n\nexport const ContactInfo = styled.p`\n  width: 600px;\n  font-size: 16px;\n  font-weight: 500;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ContactBtn, ContactInfo, ContactItem } from './ContactListItem.styled';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <ContactItem key={id}>\n      <ContactInfo>{name}</ContactInfo>\n      <ContactInfo>{number}</ContactInfo>\n      <ContactBtn type=\"button\" onClick={() => handleDelete(id)}>\n        Delete\n      </ContactBtn>\n    </ContactItem>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ContactRoster = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  list-style: none;\n  padding: 0;\n  margin: 70px 0 0 0;\n`;\n","import { useSelector } from 'react-redux';\nimport {\n  selectContactsFilter,\n  selectContactsList,\n} from 'redux/contacts/selectors';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { ContactRoster } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContactsList);\n  const filter = useSelector(selectContactsFilter);\n\n  const visibleContacts = [\n    ...contacts.filter(contact => contact.name.toLowerCase().includes(filter)),\n  ];\n\n  return (\n    <ContactRoster>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactListItem key={id} id={id} name={name} number={number} />\n      ))}\n    </ContactRoster>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(138.13deg, #22343c75 25.87%, #1f2e3572 100%);\n  z-index: 1200;\n`;\n\nexport const ModalWindow = styled.div`\n  border-radius: 8px;\n  overflow: hidden;\n\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n\n  padding: 30px;\n  background-color: #f9f9f9;\n`;\n","import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { Overlay, ModalWindow } from './Modal.styled';\nimport { createPortal } from 'react-dom';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ children, onCloseModal }) => {\n  useEffect(() => {\n    const handleKeydown = e => {\n      if (e.code === 'Escape') {\n        onCloseModal();\n      }\n    };\n\n    window.addEventListener('keedown', handleKeydown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeydown);\n    };\n  }, [onCloseModal]);\n\n  const handleDackdropClick = ({ target, currentTarget }) => {\n    if (currentTarget === target) {\n      onCloseModal();\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleDackdropClick}>\n      <ModalWindow>{children}</ModalWindow>\n    </Overlay>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onCloseModal: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const PageContainer = styled.div`\n  padding: 40px;\n  height: 150vh;\n\n  border-radius: 32px;\n  background-color: #ffffff;\n`;\n\nexport const ContactNavWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const Title = styled.h2`\n  font-weight: 700;\n  font-size: 34px;\n\n  margin: 0;\n`;\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  margin-left: auto;\n`;\n\nexport const NewContactBtn = styled.button`\n  display: block;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 18px;\n\n  margin-top: 14px;\n  padding: 20px 30px;\n  width: 200px;\n  height: 60px;\n  text-align: center;\n\n  color: #feff86;\n  background-color: #0079ff;\n\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  border: none;\n  border-radius: 14px;\n\n  cursor: pointer;\n\n  :hover,\n  :focus {\n    color: #0079ff;\n    background: #feff86;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\n// import { Section } from 'components/Section/Section';\nimport { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Modal } from 'components/Modal/Modal';\nimport {\n  NewContactBtn,\n  PageContainer,\n  ContactNavWrapper,\n  Title,\n  FilterWrapper,\n} from './Contacts.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const [isShowModalAddUser, setIsShowModalAddUser] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleOpenModal = () => {\n    setIsShowModalAddUser(prev => !prev);\n  };\n\n  return (\n    <PageContainer>\n      <ContactNavWrapper>\n        <Title>CONTACTS</Title>\n        <FilterWrapper>\n          <SearchForm />\n          <NewContactBtn type=\"button\" onClick={handleOpenModal}>\n            Add contact\n          </NewContactBtn>\n        </FilterWrapper>\n      </ContactNavWrapper>\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n\n      {isShowModalAddUser && (\n        <Modal\n          children={<ContactsForm onCloseModal={handleOpenModal} />}\n          onCloseModal={handleOpenModal}\n        ></Modal>\n      )}\n    </PageContainer>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContactsList","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectContactsFilter","filters","Form","styled","FormikForm","FormLabel","Field","FormikField","FormBtn","ContactSchema","Yup","shape","name","min","max","required","number","ContactsForm","onCloseModal","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","values","actions","newContact","filter","contact","toLowerCase","trim","length","Notiflix","addContact","resetForm","htmlFor","type","pattern","title","Container","Filter","FilterField","SearchForm","value","onChange","e","setContactsFilter","target","placeholder","ContactItem","ContactBtn","ContactInfo","ContactListItem","id","onClick","contactId","deleteContact","ContactRoster","ContactList","visibleContacts","includes","map","Overlay","ModalWindow","modalRoot","document","querySelector","Modal","children","useEffect","handleKeydown","code","window","addEventListener","removeEventListener","createPortal","currentTarget","PageContainer","ContactNavWrapper","Title","FilterWrapper","NewContactBtn","useState","isShowModalAddUser","setIsShowModalAddUser","fetchContacts","handleOpenModal","prev"],"sourceRoot":""}