{"version":3,"file":"static/js/162.af7f9d5d.chunk.js","mappings":"iQAGaA,GAAOC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,mFAMJE,EAAYF,EAAAA,EAAAA,MAAH,mGAOTG,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,8EAMLK,EAAUL,EAAAA,EAAAA,OAAH,sQ,8BCddM,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,MAAON,EAAAA,KACJG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,cAGDE,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAe7B,OACE,SAAC,KAAD,CACEC,cAAe,CAAEX,KAAM,GAAII,MAAO,IAClCQ,iBAAkBf,EAClBgB,SAAU,SAACC,EAAQC,GAjBF,IAAAC,KAkBF,UAAKF,GAhBpBN,EAASS,QACP,SAAAC,GAAO,OACLA,EAAQlB,KAAKmB,cAAcC,SAC3BJ,EAAWhB,KAAKmB,cAAcC,MAFzB,IAGPC,OAAS,EAEXC,IAAAA,OAAAA,QAAA,UAA2BN,EAAWhB,KAAtC,4BAGFM,GAASiB,EAAAA,EAAAA,IAAWP,IAQhBD,EAAQS,WACT,EANH,UAQE,UAAClC,EAAD,YACE,UAACG,EAAD,CAAWgC,QAAQ,OAAnB,UAA0B,QAExB,SAAC/B,EAAD,CACEgC,KAAK,OACL1B,KAAK,OACL2B,QAAQ,yHACRC,MAAM,yIACNzB,UAAQ,QAGZ,UAACV,EAAD,CAAWgC,QAAQ,QAAnB,UAA2B,UAEzB,SAAC/B,EAAD,CACEgC,KAAK,MACL1B,KAAK,QACL2B,QAAQ,yFACRC,MAAM,+FACNzB,UAAQ,QAGZ,SAACP,EAAD,CAAS8B,KAAK,SAAd,SAAuB,oBAI9B,C,sDChED,UAJc,WACZ,OAAO,SAAC,IAAD,GACR,C,gICJM,IAAMhB,EAAqB,SAAAmB,GAAK,OAAIA,EAAMrB,SAASsB,KAAnB,EAC1BC,EAAkB,SAAAF,GAAK,OAAIA,EAAMrB,SAASwB,SAAnB,EACvBC,EAAc,SAAAJ,GAAK,OAAIA,EAAMrB,SAAS0B,KAAnB,EACnBC,EAAuB,SAAAN,GAAK,OAAIA,EAAMO,OAAV,C","sources":["components/ContactsForm/ContactsForm.styled.js","components/ContactsForm/ContactsForm.js","pages/Login/Login.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form as FormikForm, Field as FormikField } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 340px;\n`;\n\nexport const Field = styled(FormikField)`\n  border-radius: 4px;\n  border: 0;\n  height: 30px;\n`;\n\nexport const FormBtn = styled.button`\n  width: 340px;\n  height: 30px;\n  cursor: pointer;\n  background-color: grey;\n  border: none;\n  border-radius: 4px;\n  box-shadow: 0px 0px 2px 2px rgb(0, 0, 0);\n  &:hover {\n    background-color: aquamarine;\n    color: white;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { Form, FormLabel, FormBtn, Field } from './ContactsForm.styled';\nimport { selectContactsList } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst ContactShema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  phone: Yup.string()\n    .min(2, 'Too Short!')\n    .max(13, 'Too Long!')\n    .required('Required'),\n});\n\nexport const ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsList);\n\n  const handleSubmit = newContact => {\n    if (\n      contacts.filter(\n        contact =>\n          contact.name.toLowerCase().trim() ===\n          newContact.name.toLowerCase().trim()\n      ).length > 0\n    ) {\n      Notiflix.Notify.warning(`${newContact.name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(newContact));\n  };\n  return (\n    <Formik\n      initialValues={{ name: '', phone: '' }}\n      validationSchema={ContactShema}\n      onSubmit={(values, actions) => {\n        handleSubmit({ ...values });\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <FormLabel htmlFor=\"name\">\n          Name\n          <Field\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </FormLabel>\n        <FormLabel htmlFor=\"phone\">\n          Number\n          <Field\n            type=\"tel\"\n            name=\"phone\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </FormLabel>\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </Form>\n    </Formik>\n  );\n};\n","import { ContactsForm } from 'components/ContactsForm/ContactsForm';\n\nconst Login = () => {\n  return <ContactsForm />;\n};\n\nexport default Login;\n","export const selectContactsList = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectContactsFilter = state => state.filters;\n"],"names":["Form","styled","FormikForm","FormLabel","Field","FormikField","FormBtn","ContactShema","Yup","shape","name","min","max","required","phone","ContactsForm","dispatch","useDispatch","contacts","useSelector","selectContactsList","initialValues","validationSchema","onSubmit","values","actions","newContact","filter","contact","toLowerCase","trim","length","Notiflix","addContact","resetForm","htmlFor","type","pattern","title","state","items","selectIsLoading","isLoading","selectError","error","selectContactsFilter","filters"],"sourceRoot":""}